function Core() {

    const MongoFuncs = require("./dbfuncs");
    const Config = require("./config.json")
    const Extra = require('telegraf/extra')
    const Markup = require('telegraf/markup')

    const MarkUpKeyboards = {
        HELLO: Markup.inlineKeyboard([
            Markup.callbackButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', Config.CALLBACKS.GAME_START),
            Markup.callbackButton('–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å', Config.CALLBACKS.GAME_BALANCE)]).extra(),
        PLAY: Markup.inlineKeyboard([
            Markup.callbackButton('JAD', Config.CALLBACKS.GAME_JAD),
            Markup.callbackButton('POKER', Config.CALLBACKS.GAME_POKER)
        ]).extra()
    }
    MongoFuncs.dbInit().then(console.log);

    function onStart(ctx) {
        userExist(ctx.message.from.id).then((exists) => {
            console.log(exists);
            if(exists) ctx.reply(`–ó–¥–∞—Ä–æ–≤–∞ –±—Ä–æ-${ctx.message.from.first_name}!\n–®–æ —Ç–µ–±–µ –Ω–∞–¥–æ?`, MarkUpKeyboards.HELLO);
            else {
                ctx.reply(`–î–∞—Ä–æ—É, —Ç—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ —ç—Ç–æ–º –±–æ—Ç–µ?\n–¢–æ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—á–∏—Ç–∞—Ç—å /help –¥–∞–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ –∏–≥—Ä–∞—Ç—å.\n–£–¥–∞—á–∏!`, MarkUpKeyboards.HELLO);
                MongoFuncs.dbInsertPlayer({
                    [Config.USER.UID]: ctx.message.from.id,
                    [Config.USER.NAME]: ctx.message.from.first_name,
                    [Config.USER.BALANCE]: 500,
                    [Config.USER.STATE]: 0,
                    [Config.USER.CURRENT_BET]: {
                        [Config.USER.BET_CHANCE]: 0,
                        [Config.USER.BET_SIZE]: 0
                    }
                });
            }
        });
    }

    function callbackHandler(ctx) {
        switch (ctx.update.callback_query.data) {
            case Config.CALLBACKS.GAME_START:
                ctx.reply(`–í–æ —á—Ç–æ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?`, MarkUpKeyboards.PLAY);
            break;
            case Config.CALLBACKS.GAME_JAD:
                MongoFuncs.dbGetUserById(ctx.update.callback_query.from.id).then((player) => {
                    if(player.balance === 0) {
                        ctx.reply(`–ö–∞–∫ –±—É–¥—É—Ç –¥–µ–Ω—å–≥–∏ - –ø—Ä–∏—Ö–æ–¥–∏, –∞ –ø–æ–∫–∞ –∏–¥–∏ –Ω–∞—Ö—É–π —á–º–æ`);
                    } else {
                        ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ —à–∞–Ω—Å –ø–æ–±–µ–¥—ã`, Markup.keyboard([['50'], ['25', '10', '5']]).oneTime().resize().extra());
                        MongoFuncs.dbChangePlayerState(ctx.update.callback_query.from.id, 1);
                    }
                })
            break;
            case Config.CALLBACKS.GAME_POKER:
                ctx.reply(`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π –ø–æ–∫–∞ —á—Ç–æ (–Ω—É –∏–ª–∏ –ø–æ—Å–æ—Å–∏—Ç–µ –º–Ω–µ —á–ª3–Ω)) )`);
            break;
            case Config.CALLBACKS.GAME_BALANCE:
                onBalance(ctx);
        }
        ctx.answerCbQuery(`selected ${ctx.update.callback_query.data}`)
    }

    function textHandler(ctx) {
        MongoFuncs.dbGetUserById(ctx.message.from.id).then((res) => {
            console.log(res);
            switch (res.state) {
                case 0:
                     ctx.reply(`–ù–µ –ø–æ–Ω—è–ª :(`);
                    break;
                case 1:
                    if(/\d+(\.\d+)?/gm.test(ctx.message.text)) {
                        let result = ctx.message.text.match(/\d+/);
                        if (result.length !== 1) {
                            ctx.reply(`–£—É–ø—Å! –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª(! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`)
                        } else {
                            if(result[0] > 0 && result[0] < 100)
                            {
                                MongoFuncs.dbUpdatePlayerBetChance(ctx.message.from.id, parseFloat(result[0]))
                                    .then(()=> MongoFuncs.dbChangePlayerState(ctx.message.from.id, 2));
                                MongoFuncs.dbGetUserById(ctx.message.from.id).then((player)=>ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏`,
                                    Markup.keyboard([[player.balance.toString()], [(player.balance/2).toString(),
                                        (player.balance/4).toString()], [(player.balance/10).toString()]]).oneTime().resize().extra()));

                            } else {
                                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 - 99!`)
                            }
                        }
                    }
                    else ctx.reply(`–ß—Ç–æ-—Ç–æ –≤—ã —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª–∏. –ú–± –ø–æ –µ–±–∞–ª—É? (–µ—â–µ —Ä–∞–∑)`);
                    break;
                case 2:
                    if(/\d+(\.\d+)?/gm.test(ctx.message.text)) {
                        let result = ctx.message.text.match(/\d+/);
                        if (result.length !== 1) {
                            ctx.reply(`–£—É–ø—Å! –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª(! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`)
                        } else {
                            const betSize = parseFloat(result[0]);
                            MongoFuncs.dbUpdatePlayerBetSize(ctx.message.from.id, betSize)
                                .then(()=> {
                                    MongoFuncs.dbGetUserById(ctx.message.from.id)
                                        .then((player) => {
                                            console.log(betSize);
                                            if(betSize <= 0) {
                                                ctx.reply("–¢—ã —à–æ –µ–±–æ–±–æ? –ò–¥–∏-–∫–∞ —Ç—ã –Ω–∞—Ö—É–π —Å —Ç–∞–∫–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏");
                                                return;
                                            }
                                            if(betSize > player[Config.USER.BALANCE]) {
                                                ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–±–∂–µ–π :(");
                                                return;
                                            }
                                        MongoFuncs.dbUpdatePlayerBalance(ctx.message.from.id,
                                            parseFloat((player[Config.USER.BALANCE] - betSize).toFixed(3))
                                        ).then(() => {
                                            ctx.reply(`–°—á–∏—Ç–∞–µ–º –≤–∞—à—É —Å—Ç–∞–≤–∫—É...`)
                                                .then(() => {
                                                    let win = processBet(player[Config.USER.CURRENT_BET]);
                                                    let finishCB = function () {
                                                        ctx.reply(`–í–∞—É! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${win} —Å–∞–±–∂–µ–π! –†–ï–†–ï–ô–ó!`, MarkUpKeyboards.PLAY);
                                                        MongoFuncs.dbClearPlayerBet(ctx.message.from.id, player[Config.USER.BALANCE] + win);
                                                    }
                                                    if(win === 0) ctx.reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(\n–°—ã–≥—Ä–∞–µ–º –µ—à–µ?`, MarkUpKeyboards.PLAY);
                                                    else if(player[Config.USER.CURRENT_BET][Config.USER.BET_CHANCE] <= 5)
                                                            ctx.reply("üí∏üí∏üí∏MEGA SUPER BIG WINüí∏üí∏üí∏\n").then(finishCB);
                                                        else if(player[Config.USER.CURRENT_BET][Config.USER.BET_CHANCE] <= 10)
                                                                ctx.reply("üí∏üí∏SUPER BIG WINüí∏üí∏\n").then(finishCB);
                                                            else if(player[Config.USER.CURRENT_BET][Config.USER.BET_CHANCE] <= 25)
                                                                    ctx.reply("üí∏BIG WINüí∏\n").then(finishCB);
                                                            else ctx.reply("üí∏WINüí∏\n").then(finishCB);
                                                }
                                            );
                                        })
                                    })
                                });
                        }
                    }
                    else ctx.reply(`–ß—Ç–æ-—Ç–æ –≤—ã —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª–∏. –ú–± –ø–æ –µ–±–∞–ª—É? (–µ—â–µ —Ä–∞–∑)`);
                    MongoFuncs.dbChangePlayerState(ctx.message.from.id, 0)

            }
        });
    }

    function processBet(bet) {
        return (Math.random() * 100 < bet[Config.USER.BET_CHANCE])
            ? bet[Config.USER.BET_SIZE] * 100/bet[Config.USER.BET_CHANCE] : 0;
    }

    function onHelp(ctx) {
        ctx.reply(`–†–∞—Å–∫–ª–∞–¥ —Ç–∞–∫–æ–π:\n   /balance - —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å`);
    }

    function onGetList(ctx) {
        MongoFuncs.dbGetPlayers().then((res) => ctx.reply(res));
    }
    
    async function checkAdmin(uid) {
        let query = await MongoFuncs.dbGetUserById(uid);
        return query !== null ? query[Config.USER.ADMIN] : false;
    }
    
    async function userExist(uid) {
        let query = await MongoFuncs.dbGetUserById(uid);
        return query !== null;
    }

    async function onBalance(ctx) {
        return await (ctx.message !== undefined) ?
            MongoFuncs.dbGetUserById(ctx.message.from.id).then((res) => ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å - ${res[Config.USER.BALANCE]} —Å–∞–±–∂–µ–π`)) :
            MongoFuncs.dbGetUserById(ctx.update.callback_query.from.id).then((res) => ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å - ${res[Config.USER.BALANCE]} —Å–∞–±–∂–µ–π`));
    }

    async function onSetBalance(ctx) {
        let res = ctx.message.text.match(/\w+/gm);
        console.log(res)
        if(res.length !== 3) ctx.reply(`–¥–æ–¥–∏–∫`);
        else MongoFuncs.dbUpdatePlayerBalance(parseInt(res[1]), parseFloat(res[2]));
    }

    return {
        onSetBalance,
        onBalance,
        onStart,
        onGetList,
        onHelp,
        dumpDB : MongoFuncs.dbDump,
        callbackHandler,
        textHandler
    }
}

module.exports = Core();
